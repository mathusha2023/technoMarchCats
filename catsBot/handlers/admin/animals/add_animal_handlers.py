from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from datetime import datetime
from data import db_session
import keyboards
import strings
from data.animals_tags import AnimalTag
from filters import StatesGroupFilter
from middlewares import MediaGroupMiddleware
from states import AddAnimalStates
from utils.add_animal_to_db import add_animal_to_db
from utils.generate_animal_card_by_state import generate_animal_card_by_state

router = Router()
router.message.middleware(MediaGroupMiddleware())

@router.message(F.text == "üö´ –û—Ç–º–µ–Ω–∞", StatesGroupFilter(AddAnimalStates))  # —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboards.ReplyKeyboardRemove())
    await message.answer(strings.ADMIN_MENU_CAPTION, reply_markup=keyboards.admin_menu_keyboard())


@router.message(F.text, AddAnimalStates.naming)
async def naming(message: Message, state: FSMContext):
    await state.update_data({"name": message.text})
    await state.set_state(AddAnimalStates.adding_gender)
    await message.answer("–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ù–∞—à –Ω–æ–≤—ã–π –¥—Ä—É–≥ –º–∞–ª—å—á–∏–∫ –∏–ª–∏ –¥–µ–≤–æ—á–∫–∞? –í—ã–±–µ—Ä–∏—Ç–µ: 1 - –º–∞–ª—å—á–∏–∫, 2 - –¥–µ–≤–æ—á–∫–∞",
                         reply_markup=keyboards.select_animal_gender_keyboard())


@router.message(F.text.in_(["1", "2"]), AddAnimalStates.adding_gender)
async def adding_gender(message: Message, state: FSMContext):
    await state.update_data({"gender": int(message.text) - 1})
    await state.set_state(AddAnimalStates.adding_birthday)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ö–æ–≥–¥–∞ —É –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è? –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy",
                         reply_markup=keyboards.cancel_keyboard())


@router.message(F.text, AddAnimalStates.adding_gender)
async def adding_gender(message: Message):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ 1, –µ—Å–ª–∏ —É –Ω–∞—Å –º–∞–ª—å—á–∏–∫, –∏ 2 - –µ—Å–ª–∏ –¥–µ–≤–æ—á–∫–∞!")


@router.message(F.text, AddAnimalStates.adding_birthday)
async def adding_age(message: Message, state: FSMContext):
    try:
        date_ = datetime.strptime(message.text, "%d.%m.%Y").date()
        if date_ > datetime.today().date():
            return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!")
        await state.update_data({"birthday": date_})
        await state.set_state(AddAnimalStates.describing)
        await message.answer("–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –û–ø–∏—à–∏—Ç–µ –∫–æ—Ç–∏–∫–∞")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!")


@router.message(F.text, AddAnimalStates.describing)
async def describing(message: Message, state: FSMContext):
    await state.update_data({"description": message.text})
    await state.set_state(AddAnimalStates.adding_images)
    await message.answer("–ó–∞–ø–∏—Å–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫–æ—Ç–∏–∫–∞")


@router.message(AddAnimalStates.adding_images)
async def adding_images(message: Message, state: FSMContext, album: [Message] = None):
    photos = []
    if album is None:  # –µ—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –±—ã–ª–∏ –ø—Ä–∏—Å–ª–∞–Ω—ã –≥—Ä—É–ø–ø–æ–π
        album = [message]
    for element in album:  # –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–ª—å–±–æ–º–∞
        if element.photo:
            photos.append(element.photo[-1].file_id)
    if len(photos) > 10:  # –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –ª–∏—à–Ω–∏–µ —É–¥–∞–ª—è—é—Ç—Å—è
        photos = photos[:10]
    if not photos:
        return await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç –æ–¥–Ω–æ–π –¥–æ –¥–µ—Å—è—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫–æ—Ç–∏–∫–∞!")

    await state.update_data({"photos": photos})
    await state.set_state(AddAnimalStates.adding_tags)
    await message.answer(
        "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É –Ω–∞—à–µ–≥–æ –ª—é–±–∏–º—Ü–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä, 1 2 3 8")
    session = db_session.create_session()
    tags = session.query(AnimalTag).order_by(AnimalTag.id).all()
    s = ""
    for tag in tags:
        s += f"{tag.id} - {tag.tag}\n"
    await message.answer(s)


@router.message(F.text, AddAnimalStates.adding_tags)
async def adding_tags(message: Message, state: FSMContext):
    try:
        tags = []
        session = db_session.create_session()
        indexes = map(int, message.text.split())
        for i in indexes:
            tag = session.query(AnimalTag).where(AnimalTag.id == i).first()
            if tag is None:
                raise ValueError
            tags.append(tag)
        await state.update_data({"tags": tags, "db_session": session})
        await message.answer("–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í–æ—Ç –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∞ —ç—Ç–æ–≥–æ –ø—É—à–∏—Å—Ç–æ–≥–æ –∫–æ–º–æ—á–∫–∞ —Å—á–∞—Å—Ç—å—è:")
        await generate_animal_card_by_state(await state.get_data(), message)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∏–≤—à—É—é—Å—è –∫–∞—Ä—Ç–æ—á–∫—É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=keyboards.accept_adding_animal_keyboard())
        await state.set_state(AddAnimalStates.confirm_adding)
    except ValueError:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–≥–æ–≤!")


@router.message(F.text == "‚úÖ –î–∞, –≤—Å–µ —Ç–∞–∫", AddAnimalStates.confirm_adding)
async def accept_adding(message: Message, state: FSMContext):
    await add_animal_to_db(await state.get_data())
    await message.answer("–ù–∞—à –Ω–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", reply_markup=keyboards.ReplyKeyboardRemove())
    await state.clear()
    await message.answer(strings.ADMIN_MENU_CAPTION, reply_markup=keyboards.admin_menu_keyboard())


@router.message(F.text == "‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–Ω–æ–≤–æ", AddAnimalStates.confirm_adding)
async def restart_adding(message: Message, state: FSMContext):
    await state.set_data({})  # –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.set_state(AddAnimalStates.naming)  # –∑–∞–Ω–æ–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–∞—à–µ–≥–æ –∫–æ—Ç–∏–∫–∞", reply_markup=keyboards.ReplyKeyboardRemove())
