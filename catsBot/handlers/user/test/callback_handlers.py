from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from states import TestStates, WatchAnimalsStates
import keyboards
from aiogram import Router, F, Bot
from utils.best_match import best_match
from utils.generate_animal_card_by_state import generate_animal_card_by_state
from utils.main_info import get_animal_info
import strings
from filters import StatesGroupFilter
from data import db_session
from data.users import User
from data.animals import Animal

router = Router()

results = {
        "1Ô∏è‚É£": ["–°–ø–æ–∫–æ–π–Ω—ã–π", "–õ–∞—Å–∫–æ–≤—ã–π", "–ü–æ—Å–ª—É—à–Ω—ã–π", "–î–æ–º–∞—à–Ω–∏–π", "–°–µ—Ä—ã–π", "–î—ã–º—á–∞—Ç—ã–π"],
        "2Ô∏è‚É£": ["–ò–≥—Ä–∏–≤—ã–π", "–ê–∫—Ç–∏–≤–Ω—ã–π", "–õ—é–±–æ–ø—ã—Ç–Ω—ã–π", "–†—ã–∂–∏–π", "–ü–æ–ª–æ—Å–∞—Ç—ã–π", "–ü—É—à–∏—Å—Ç—ã–π"],
        "3Ô∏è‚É£": ["–ì–æ—Ä–¥—ã–π", "–ù–µ–ø—Ä–∏—Å—Ç—É–ø–Ω—ã–π", "–ù–µ–ø—Ä–∏–≤–µ—Ä–µ–¥–ª–∏–≤—ã–π", "–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–ü—è—Ç–Ω–∏—Å—Ç—ã–π"]
    }

@router.message(F.text == "üö´ –û—Ç–º–µ–Ω–∞",
                StatesGroupFilter(TestStates))  # —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω", reply_markup=keyboards.ReplyKeyboardRemove())
    await message.answer(strings.GREETING, reply_markup=keyboards.start_keyboard())

@router.message(F.text.in_(["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"]), TestStates.question1)
async def question1(message: Message, state: FSMContext):
    data = await state.get_data()
    data[message.text] += 1
    await state.update_data(data)
    await message.answer("""<b>2. –ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∫–æ—Ç–∞ –í–∞–º –±–ª–∏–∂–µ?</b>
 <b>1Ô∏è‚É£</b> –°–ø–æ–∫–æ–π–Ω—ã–π –∏ –ª–∞—Å–∫–æ–≤—ã–π.
 <b>2Ô∏è‚É£</b> –ò–≥—Ä–∏–≤—ã–π –∏ –ª—é–±–æ–ø—ã—Ç–Ω—ã–π.
 <b>3Ô∏è‚É£</b> –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∏ –≥–æ—Ä–¥—ã–π.""", reply_markup=keyboards.test_reply_keyboard())
    await state.set_state(TestStates.question2)


@router.message(F.text.in_(["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"]), TestStates.question2)
async def question2(message: Message, state: FSMContext):
    data = await state.get_data()
    data[message.text] += 1
    await state.update_data(data)
    await message.answer("""<b>3. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –í—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –∫–æ—Ç—É?</b>
 <b>1Ô∏è‚É£</b> –ú–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –≥–æ—Ç–æ–≤(–∞) –∏–≥—Ä–∞—Ç—å –∏ —É—Ö–∞–∂–∏–≤–∞—Ç—å.
 <b>2Ô∏è‚É£</b> –£–º–µ—Ä–µ–Ω–Ω–æ, –Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ.
 <b>3Ô∏è‚É£</b> –ù–µ–º–Ω–æ–≥–æ, –Ω–æ –≥–æ—Ç–æ–≤(–∞) –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç.""", reply_markup=keyboards.test_reply_keyboard())
    await state.set_state(TestStates.question3)

@router.message(F.text.in_(["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"]), TestStates.question3)
async def question3(message: Message, state: FSMContext):
    data = await state.get_data()
    data[message.text] += 1
    await state.update_data(data)
    await message.answer("""<b>4. –ö–∞–∫–æ–π –æ–∫—Ä–∞—Å –∫–æ—Ç–∞ –í–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è?</b>
 <b>1Ô∏è‚É£</b> –°–µ—Ä—ã–π, –¥—ã–º—á–∞—Ç—ã–π, —á–µ—Ä–Ω—ã–π.
 <b>2Ô∏è‚É£</b> –†—ã–∂–∏–π, –ø–æ–ª–æ—Å–∞—Ç—ã–π, –ø—è—Ç–Ω–∏—Å—Ç—ã–π.
 <b>3Ô∏è‚É£</b> –ë–µ–ª—ã–π, –ø—É—à–∏—Å—Ç—ã–π.""", reply_markup=keyboards.test_reply_keyboard())
    await state.set_state(TestStates.question4)

@router.message(F.text.in_(["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"]), TestStates.question4)
async def question4(message: Message, state: FSMContext):
    data = await state.get_data()
    data[message.text] += 1
    await state.update_data(data)
    await message.answer("""<b>5. –ö–∞–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç –∫–æ—Ç–∞ –í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?</b>
 <b>1Ô∏è‚É£</b> –ú–∏—Ä–æ–ª—é–±–∏–≤—ã–π –∏ –ø–æ—Å–ª—É—à–Ω—ã–π.
 <b>2Ô∏è‚É£</b> –ê–∫—Ç–∏–≤–Ω—ã–π –∏ –ª—é–±–æ–ø—ã—Ç–Ω—ã–π.
 <b>3Ô∏è‚É£</b> –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∏ –Ω–µ–ø—Ä–∏—Å—Ç—É–ø–Ω—ã–π.""", reply_markup=keyboards.test_reply_keyboard())
    await state.set_state(TestStates.question5)

@router.message(F.text.in_(["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"]), TestStates.question5)
async def question5(message: Message, state: FSMContext):
    data = await state.get_data()
    data[message.text] += 1
    await state.update_data(data)
    await message.answer("""<b>6. –ï—Å—Ç—å –ª–∏ —É –í–∞—Å –¥–µ—Ç–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ?</b>
 <b>1Ô∏è‚É£</b> –î–∞, –Ω—É–∂–µ–Ω –∫–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ª–∞–¥–∏—Ç —Å –¥—Ä—É–≥–∏–º–∏.
 <b>2Ô∏è‚É£</b> –ù–µ—Ç, –Ω–æ —Ö–æ—á—É, —á—Ç–æ–±—ã –∫–æ—Ç –±—ã–ª –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º.
 <b>3Ô∏è‚É£</b> –ù–µ—Ç, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –∫–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.""", reply_markup=keyboards.test_reply_keyboard())
    await state.set_state(TestStates.question6)

@router.message(F.text.in_(["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"]), TestStates.question6)
async def question6(message: Message, state: FSMContext):
    data = await state.get_data()
    data[message.text] += 1
    await state.update_data(data)
    await message.answer("""<b>7. –ì–æ—Ç–æ–≤—ã –ª–∏ –í—ã —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –∫–æ—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ª–µ—á–µ–Ω–∏–∏?</b>
 <b>1Ô∏è‚É£</b> –î–∞, –≥–æ—Ç–æ–≤(–∞) –ø–æ–º–æ—á—å.
 <b>2Ô∏è‚É£</b> –ù–µ—Ç, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –∑–¥–æ—Ä–æ–≤–æ–≥–æ –∫–æ—Ç–∞.
 <b>3Ô∏è‚É£</b> –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–∏—Ö —É—Å–∏–ª–∏–π.""", reply_markup=keyboards.test_reply_keyboard())
    await state.set_state(TestStates.answer)

@router.message(TestStates.answer)
async def answer(message: Message, state: FSMContext):
    data = await state.get_data()
    
    id_ = best_match(results[max(data, key=data.get)])

    main_info = get_animal_info(id_)
    
    await generate_animal_card_by_state(main_info, message)
    await message.answer("–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", reply_markup=keyboards.final_test_keyboard())
    await state.set_state(TestStates.result)
    
@router.message(F.text == "–≤ –º–µ–Ω—é", TestStates.result, StatesGroupFilter(TestStates))
async def take(message: Message, state: FSMContext):
    if F.text == "üì• –•–æ—á—É –≤–∑—è—Ç—å!":
        pass
    await message.answer(strings.GREETING, reply_markup=keyboards.start_keyboard())
    await state.clear()

@router.message(F.text == "üì• –•–æ—á—É –≤–∑—è—Ç—å!", TestStates.result, StatesGroupFilter(TestStates))
async def take_cat(message: Message, state: FSMContext, bot: Bot):
    session = db_session.create_session()

    user = session.query(User).where(User.id == message.from_user.id).first()
    animal = session.query(Animal).where(
        Animal.id == user.lastWatchedAnimal).first()  # –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ
    if animal is None:  # –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ –∏–º–µ–µ—Ç ID 0, —Ç–æ –µ—Å—Ç—å –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
        return await message.answer("–°–µ–π—á–∞—Å –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ!")

    last_request = session.query(AnimalRequest).where(and_(AnimalRequest.userId == user.id, AnimalRequest.animalId == animal.id)).first()  # –∏—â–µ–º –∑–∞—è–≤–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if last_request:  # –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –∑–∞–Ω–æ–≤–æ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ–º
        return await message.answer("–ó–∞—è–≤–∫–∞ –Ω–∞ —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞ —É–∂–∞ –±—ã–ª–∞ –ø–æ–¥–∞–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!")

    animal_request = AnimalRequest()
    animal_request.user = user
    animal_request.animal = animal
    session.add(animal_request)
    session.commit()

    await send_message_to_all_administrators(bot, "–ü–æ–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")  # –æ–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏

    await state.update_data({"took": True})  # –µ—Å–ª–∏ –∫–æ—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –≤–∑—è–ª–∏ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥

    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ò–¥—ë–º –¥–∞–ª—å—à–µ?",
                         reply_markup=keyboards.watch_animals_after_taking_keyboard())

    
@router.message(F.text, StatesGroupFilter(TestStates))
async def badInput(message: Message, state: FSMContext):
    await message.answer("–¢–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç", reply_markup=keyboards.test_reply_keyboard())
