from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

import strings
from filters import StatesGroupFilter
from states import TestStates
import keyboards
from aiogram import Router, F, Bot
from sqlalchemy import and_

from data.animal_requests import AnimalRequest
from data import db_session
from data.users import User
from data.animals import Animal
from utils.send_message_to_all_administrators import send_message_to_all_administrators

router = Router()


@router.callback_query(F.data == "test")
async def test_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("""<b>1. –ö–∞–∫–æ–π —É –≤–∞—Å –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏?</b>
    <b>1Ô∏è‚É£</b> –°–ø–æ–∫–æ–π–Ω—ã–π, –ª—é–±–ª—é –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –¥–æ–º–∞.
    <b>2Ô∏è‚É£</b> –ê–∫—Ç–∏–≤–Ω—ã–π Ô∏è, —á–∞—Å—Ç–æ –≥—É–ª—è—é –∏–ª–∏ –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º.
    <b>3Ô∏è‚É£</b> –ó–∞–Ω–∏–º–∞—é—Å—å —Ä–∞–±–æ—Ç–æ–π –∏–ª–∏ —É—á–µ–±–æ–π, –Ω–æ –ª—é–±–ª—é –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏.""",
                                  reply_markup=keyboards.test_reply_keyboard())
    await state.set_state(TestStates.question1)
    await state.update_data({"1Ô∏è‚É£": 0, "2Ô∏è‚É£": 0, "3Ô∏è‚É£": 0})
    await callback.answer()


@router.message(F.text == "üìÇ –í –º–µ–Ω—é", TestStates.result, StatesGroupFilter(TestStates))
async def take(message: Message, state: FSMContext):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é", reply_markup=keyboards.ReplyKeyboardRemove())
    await message.answer(strings.GREETING, reply_markup=keyboards.start_keyboard())
    await state.clear()


@router.message(F.text == "üì• –•–æ—á—É –≤–∑—è—Ç—å!", TestStates.result, StatesGroupFilter(TestStates))
async def take_cat(message: Message, state: FSMContext, bot: Bot):
    session = db_session.create_session()
    animal_id = (await state.get_data())["animal_id"]

    user = session.query(User).where(User.id == message.from_user.id).first()
    animal = session.query(Animal).where(Animal.id == animal_id).first()
    if animal is None:  # –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ, –∑–Ω–∞—á–∏—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç
        return await message.answer("–°–µ–π—á–∞—Å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ!")

    last_request = session.query(AnimalRequest).where(and_(AnimalRequest.userId == user.id,
                                                           AnimalRequest.animalId == animal.id)).first()  # –∏—â–µ–º –∑–∞—è–≤–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if last_request:  # –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –∑–∞–Ω–æ–≤–æ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ–º
        await message.answer(
            "–ó–∞—è–≤–∫–∞ –Ω–∞ —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞ —É–∂–∞ –±—ã–ª–∞ –ø–æ–¥–∞–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!",
            reply_markup=keyboards.ReplyKeyboardRemove())
    else:
        animal_request = AnimalRequest()
        animal_request.user = user
        animal_request.animal = animal
        session.add(animal_request)
        session.commit()

        await send_message_to_all_administrators(bot,
                                                 "–ü–æ–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")  # –æ–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏

        await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
                             reply_markup=keyboards.ReplyKeyboardRemove())
    await message.answer(strings.GREETING, reply_markup=keyboards.start_keyboard())
    await state.clear()
