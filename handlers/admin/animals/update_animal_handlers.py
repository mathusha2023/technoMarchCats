from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from datetime import datetime
from data import db_session
import keyboards
import strings
from data.animals import Animal
from data.animals_tags import AnimalTag
from filters import StatesGroupFilter
from middlewares import MediaGroupMiddleware
from states import UpdateAnimalStates
from utils.generate_animal_card_by_state import generate_animal_card_by_state
from utils.update_animal_information import update_animal_information

router = Router()
router.message.middleware(MediaGroupMiddleware())


@router.message(F.text == "üìÇ –í –º–µ–Ω—é",
                StatesGroupFilter(UpdateAnimalStates))  # —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
async def back(message: Message, state: FSMContext):  # –ø–æ–ª–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö
    await state.clear()
    await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ç–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboards.ReplyKeyboardRemove())
    await message.answer(strings.ADMIN_MENU_CAPTION, reply_markup=keyboards.admin_menu_keyboard())


@router.message(F.text == "üö´ –û—Ç–º–µ–Ω–∞",
                StatesGroupFilter(UpdateAnimalStates))  # —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
async def cancel(message: Message, state: FSMContext):  # –æ—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∫–æ–≥–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–æ—Ç–∞
    await state.set_state(UpdateAnimalStates.choose_change_param)
    await message.answer(f"–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å?", reply_markup=keyboards.admin_update_animal_keyboard())


@router.message(F.text.isdigit(), UpdateAnimalStates.index_input)  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –æ–Ω —Ö–æ—á–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å
async def update_animal(message: Message, state: FSMContext):
    animal_id = int(message.text)
    session = db_session.create_session()
    animal = session.query(Animal).where(Animal.id == animal_id).first()
    if animal is None:
        return await message.answer(f"–ñ–∏–≤–æ—Ç–Ω–æ–≥–æ —Å ID {animal_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID",
                                    reply_markup=message.reply_markup)

    list_images = [image.image for image in animal.images]
    data = {"session": session, "id": animal_id, "name": animal.name, "gender": animal.gender,
            "birthday": animal.birthDate,
            "description": animal.description, "photos": list_images, "tags": animal.tags}

    await state.set_data(data)
    await state.set_state(UpdateAnimalStates.choose_change_param)
    await message.answer(f"–ö–∞—Ä—Ç–æ—á–∫–∞ {animal.name} —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
    await generate_animal_card_by_state(data, message)
    await message.answer(f"–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å?", reply_markup=keyboards.admin_update_animal_keyboard())


@router.message(UpdateAnimalStates.index_input)
async def update_animal_denied(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∂–∏–≤–æ—Ç–Ω–æ–≥–æ!")


@router.message(F.text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", UpdateAnimalStates.choose_change_param)
async def save_animal(message: Message, state: FSMContext):
    data = await state.get_data()

    await update_animal_information(data)

    await message.answer(f"–ö–∞—Ä—Ç–æ—á–∫–∞ {data['name']} —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:", reply_markup=keyboards.ReplyKeyboardRemove())
    await generate_animal_card_by_state(data, message)

    await state.set_state(UpdateAnimalStates.index_input)
    await state.set_data({})
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å",
                         reply_markup=keyboards.watch_animals_ids_keyboard())


@router.message(F.text == "üêà‚Äç‚¨õ –ò–º—è", UpdateAnimalStates.choose_change_param)
async def update_animal_name_request(message: Message, state: FSMContext):
    await state.set_state(UpdateAnimalStates.naming)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ—Ç–∏–∫–∞", reply_markup=keyboards.cancel_keyboard())


@router.message(F.text == "‚ùì –ü–æ–ª", UpdateAnimalStates.choose_change_param)
async def update_animal_gender_request(message: Message, state: FSMContext):
    await state.set_state(UpdateAnimalStates.changing_gender)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª –∫–æ—Ç–∏–∫–∞. 1 - –º–∞–ª—å—á–∏–∫, 2 - –¥–µ–≤–æ—á–∫–∞",
                         reply_markup=keyboards.select_animal_gender_keyboard())


@router.message(F.text == "üìÖ –î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", UpdateAnimalStates.choose_change_param)
async def update_animal_birthdate_request(message: Message, state: FSMContext):
    await state.set_state(UpdateAnimalStates.changing_birthday)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ç–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy",
                         reply_markup=keyboards.cancel_keyboard())


@router.message(F.text == "üìë –û–ø–∏—Å–∞–Ω–∏–µ", UpdateAnimalStates.choose_change_param)
async def update_animal_description_request(message: Message, state: FSMContext):
    await state.set_state(UpdateAnimalStates.describing)
    await state.update_data({"description": message.text})
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–∏–∫–∞", reply_markup=keyboards.cancel_keyboard())


@router.message(F.text == "üñºÔ∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", UpdateAnimalStates.choose_change_param)
async def update_animal_images_request(message: Message, state: FSMContext):
    await state.set_state(UpdateAnimalStates.changing_images)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ—Ç–∏–∫–∞ (–¥–æ 10 —à—Ç—É–∫)",
                         reply_markup=keyboards.cancel_keyboard())


@router.message(F.text == "üóíÔ∏è –¢–µ–≥–∏", UpdateAnimalStates.choose_change_param)
async def update_animal_tags_request(message: Message, state: FSMContext):
    await state.set_state(UpdateAnimalStates.changing_tags)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –∫–æ—Ç–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –ü—Ä–∏—à–ª–∏—Ç–µ –∏—Ö –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä, 1 2 3 8",
        reply_markup=keyboards.cancel_keyboard())

    # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–≥–æ–≤
    s = ""
    data = await state.get_data()
    session = data["session"]
    tags = session.query(AnimalTag).order_by(AnimalTag.id).all()
    for tag in tags:
        s += f"{tag.id} - {tag.tag}\n"
    await message.answer(s)


@router.message(F.text, UpdateAnimalStates.naming)
async def update_animal_name(message: Message, state: FSMContext):
    await state.update_data({"name": message.text})
    data = await state.get_data()
    await message.answer(f"–ö–∞—Ä—Ç–æ—á–∫–∞ {data['name']} —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
    await generate_animal_card_by_state(data, message)
    await cancel(message, state)


@router.message(F.text.in_(["1", "2"]), UpdateAnimalStates.changing_gender)  # –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è —Å–º–µ–Ω—ã –ø–æ–ª–∞ –∫–æ—Ç–∞
async def update_animal_gender(message: Message, state: FSMContext):
    await state.update_data({"gender": int(message.text) - 1})
    data = await state.get_data()
    await message.answer(f"–ö–∞—Ä—Ç–æ—á–∫–∞ {data['name']} —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
    await generate_animal_card_by_state(data, message)
    await cancel(message, state)


@router.message(F.text, UpdateAnimalStates.changing_gender)  # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
async def update_animal_gender_denied(message: Message):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ 1, –µ—Å–ª–∏ —É –Ω–∞—Å –º–∞–ª—å—á–∏–∫, –∏ 2 - –µ—Å–ª–∏ –¥–µ–≤–æ—á–∫–∞!")


@router.message(F.text, UpdateAnimalStates.changing_birthday)
async def update_animal_birthdate(message: Message, state: FSMContext):
    try:
        date_ = datetime.strptime(message.text, "%d.%m.%Y").date()
        if date_ > datetime.today().date():
            return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!")
        await state.update_data({"birthday": date_})
        data = await state.get_data()
        await message.answer(f"–ö–∞—Ä—Ç–æ—á–∫–∞ {data['name']} —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
        await generate_animal_card_by_state(data, message)
        await cancel(message, state)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!")


@router.message(F.text, UpdateAnimalStates.describing)
async def update_animal_description(message: Message, state: FSMContext):
    await state.update_data({"description": message.text})
    data = await state.get_data()
    await message.answer(f"–ö–∞—Ä—Ç–æ—á–∫–∞ {data['name']} —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
    await generate_animal_card_by_state(data, message)
    await cancel(message, state)


@router.message(UpdateAnimalStates.changing_images)  # –∑–∞–º–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def update_animal_images(message: Message, state: FSMContext, album: [Message] = None):
    photos = []
    if album is None:  # –µ—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –±—ã–ª–∏ –ø—Ä–∏—Å–ª–∞–Ω—ã –≥—Ä—É–ø–ø–æ–π
        album = [message]
    for element in album:  # –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–ª—å–±–æ–º–∞
        if element.photo:
            photos.append(element.photo[-1].file_id)
    if len(photos) > 10:  # –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –ª–∏—à–Ω–∏–µ —É–¥–∞–ª—è—é—Ç—Å—è
        photos = photos[:10]
    if not photos:
        return await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç –æ–¥–Ω–æ–π –¥–æ –¥–µ—Å—è—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫–æ—Ç–∏–∫–∞!")

    await state.update_data({"photos": photos})
    data = await state.get_data()
    await message.answer(f"–ö–∞—Ä—Ç–æ—á–∫–∞ {data['name']} —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
    await generate_animal_card_by_state(data, message)
    await cancel(message, state)


@router.message(F.text, UpdateAnimalStates.changing_tags)
async def update_animal_tags(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        tags = []
        session = data["session"]
        indexes = map(int, message.text.split())
        for i in indexes:
            tag = session.query(AnimalTag).where(AnimalTag.id == i).first()
            if tag is None:
                raise ValueError
            tags.append(tag)
        await state.update_data({"tags": tags})
        data["tags"] = tags
        await message.answer(f"–ö–∞—Ä—Ç–æ—á–∫–∞ {data['name']} —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
        await generate_animal_card_by_state(data, message)
        await cancel(message, state)

    except ValueError:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–≥–æ–≤!")