import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, LabeledPrice, PreCheckoutQuery, Message

import config
import strings
import keyboards
from data.statistics import Statistic
from filters import BannedFilter, StatesGroupFilter
from data.db_session import create_session
from data.users import User
from states import PaymentsStates

router = Router()


@router.message(BannedFilter())
async def answer_for_banned(callback: CallbackQuery):
    await callback.message.answer(strings.BANNED_USERS_MESSAGE, reply_markup=keyboards.ReplyKeyboardRemove())


@router.message(F.text == "üö´ –û—Ç–º–µ–Ω–∞",
                StatesGroupFilter(PaymentsStates))  # —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
async def cancel(message: Message, state: FSMContext):  # –æ—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∫–æ–≥–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–æ—Ç–∞
    await state.clear()
    session = create_session()
    user = session.query(User).where(User.id == message.from_user.id).first()
    await message.answer("–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω!", reply_markup=keyboards.ReplyKeyboardRemove())
    await message.answer(strings.HELP, reply_markup=keyboards.help_um_keyboard(user.isVolunteer))


@router.callback_query(F.data == "contact")
async def contact_callback(callback: CallbackQuery):
    await callback.message.edit_text(strings.CONTACTS, reply_markup=keyboards.about_keyboard())


@router.callback_query(F.data == "about")
async def about_callback(callback: CallbackQuery):
    await callback.message.edit_text(strings.INFO, reply_markup=keyboards.contacts_keyboard())


@router.callback_query(F.data == "start_contact")
async def start_contact_callback(callback: CallbackQuery):
    await callback.message.edit_text(strings.CONTACTS, reply_markup=keyboards.to_start_menu_keyboard())


@router.callback_query(F.data == "start_about")
async def start_about_callback(callback: CallbackQuery):
    await callback.message.edit_text(strings.INFO, reply_markup=keyboards.to_start_menu_keyboard())


@router.callback_query(F.data == "fast_pay")
async def fast_pay_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (RUB), –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å:",
                                  reply_markup=keyboards.cancel_keyboard())
    await state.set_state(PaymentsStates.pricing)
    await callback.answer()


@router.message(F.text.isdigit(), PaymentsStates.pricing)
async def pricing_payment(message: Message):
    int_price = int(message.text)
    if int_price < 60 or int_price > 250000:
        return await message.answer("–ü–ª–∞—Ç—ë–∂ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –º–µ–Ω–µ–µ 60 –∏ –Ω–µ –±–æ–ª–µ–µ 250 000 —Ä—É–±–ª–µ–π")

    price = LabeledPrice(label="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∏—é—Ç", amount=int_price * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)

    await message.answer_invoice(
        title="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∏—é—Ç",
        description="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∏—é—Ç –∫–æ–ø–µ–π–∫–æ–π",
        provider_token=config.PAYMENTS_TOKEN,
        currency="rub",
        photo_url="https://cs6.livemaster.ru/storage/51/8d/e9304e78c01418b5ea956d3be36a.jpg",
        photo_width=416,
        photo_height=234,
        photo_size=416,
        is_flexible=False,
        prices=[price],
        start_parameter="one-month-subscription",
        payload="test-invoice-payload")


# pre checkout  (must be answered in 10 seconds)
@router.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
    await pre_checkout_q.answer(ok=True)


# successful payment
@router.message(F.successful_payment)
async def successful_payment(message: Message, state: FSMContext):
    logging.info("SUCCESSFUL PAYMENT!")
    session = create_session()
    statistic = session.query(Statistic).first()
    statistic.donatesCount += 1
    statistic.donatesSum += message.successful_payment.total_amount // 100
    session.commit()

    await state.clear()
    payment_info = message.successful_payment.model_dump_json()
    logging.debug(payment_info)
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!",
        reply_markup=keyboards.ReplyKeyboardRemove())
    await message.answer(strings.GREETING, reply_markup=keyboards.start_keyboard())


@router.message(PaymentsStates.pricing)
async def pricing_payment(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")


@router.callback_query(F.data == "help_um")
async def help_um_callback(callback: CallbackQuery):
    session = create_session()
    user = session.query(User).where(User.id == callback.from_user.id).first()

    await callback.message.edit_text(strings.HELP, reply_markup=keyboards.help_um_keyboard(user.isVolunteer))


@router.callback_query(F.data == "partners_list")
async def help_up_callback(callback: CallbackQuery):

    await callback.message.edit_text("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:", reply_markup=keyboards.to_help_um_menu_keyboard())
    await callback.answer()


@router.callback_query(F.data == "start")
async def start_callback(callback: CallbackQuery):
    await callback.message.edit_text(strings.GREETING, reply_markup=keyboards.start_keyboard())
