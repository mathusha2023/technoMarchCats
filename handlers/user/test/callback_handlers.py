from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from states import TestStates
import keyboards
from aiogram import Router, F
from utils.best_match import best_match 
import strings
from filters import StatesGroupFilter

router = Router()

results = {
        "–ê": ["–°–ø–æ–∫–æ–π–Ω—ã–π", "–õ–∞—Å–∫–æ–≤—ã–π", "–ü–æ—Å–ª—É—à–Ω—ã–π", "–î–æ–º–∞—à–Ω–∏–π", "–°–µ—Ä—ã–π", "–î—ã–º—á–∞—Ç—ã–π"],
        "–ë": ["–ò–≥—Ä–∏–≤—ã–π", "–ê–∫—Ç–∏–≤–Ω—ã–π", "–õ—é–±–æ–ø—ã—Ç–Ω—ã–π", "–†—ã–∂–∏–π", "–ü–æ–ª–æ—Å–∞—Ç—ã–π", "–ü—É—à–∏—Å—Ç—ã–π"],
        "–í": ["–ì–æ—Ä–¥—ã–π", "–ù–µ–ø—Ä–∏—Å—Ç—É–ø–Ω—ã–π", "–ù–µ–ø—Ä–∏–≤–µ—Ä–µ–¥–ª–∏–≤—ã–π", "–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–ü—è—Ç–Ω–∏—Å—Ç—ã–π"]
    }

@router.message(F.text == "üö´ –û—Ç–º–µ–Ω–∞",
                StatesGroupFilter(TestStates))  # —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω", reply_markup=keyboards.ReplyKeyboardRemove())
    await message.answer(strings.GREETING, reply_markup=keyboards.start_keyboard())

@router.message(TestStates.question1)
async def question1(message: Message, state: FSMContext):
    data = await state.get_data()
    data[message.text] += 1
    await state.update_data(data)
    await message.answer("""2. –ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∫–æ—Ç–∞ –≤–∞–º –±–ª–∏–∂–µ?
    –ê) –°–ø–æ–∫–æ–π–Ω—ã–π –∏ –ª–∞—Å–∫–æ–≤—ã–π.
    –ë) –ò–≥—Ä–∏–≤—ã–π –∏ –ª—é–±–æ–ø—ã—Ç–Ω—ã–π.
    –í) –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∏ –≥–æ—Ä–¥—ã–π.""", reply_markup=keyboards.test_reply_keyboard())
    await state.set_state(TestStates.question2)


@router.message(TestStates.question2)
async def question2(message: Message, state: FSMContext):
    data = await state.get_data()
    data[message.text] += 1
    await state.update_data(data)
    await message.answer("""3. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –∫–æ—Ç—É?
    –ê) –ú–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –≥–æ—Ç–æ–≤(–∞) –∏–≥—Ä–∞—Ç—å –∏ —É—Ö–∞–∂–∏–≤–∞—Ç—å.
    –ë) –£–º–µ—Ä–µ–Ω–Ω–æ, –Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ.
    –í) –ù–µ–º–Ω–æ–≥–æ, –Ω–æ –≥–æ—Ç–æ–≤(–∞) –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç.""", reply_markup=keyboards.test_reply_keyboard())
    await state.set_state(TestStates.question3)

@router.message(TestStates.question3)
async def question3(message: Message, state: FSMContext):
    data = await state.get_data()
    data[message.text] += 1
    await state.update_data(data)
    await message.answer("""4. –ö–∞–∫–æ–π –æ–∫—Ä–∞—Å –∫–æ—Ç–∞ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è?
    –ê) –°–µ—Ä—ã–π, –¥—ã–º—á–∞—Ç—ã–π, —á–µ—Ä–Ω—ã–π.
    –ë) –†—ã–∂–∏–π, –ø–æ–ª–æ—Å–∞—Ç—ã–π, –ø—è—Ç–Ω–∏—Å—Ç—ã–π.
    –í) –ë–µ–ª—ã–π, –ø—É—à–∏—Å—Ç—ã–π.""", reply_markup=keyboards.test_reply_keyboard())
    await state.set_state(TestStates.question4)

@router.message(TestStates.question4)
async def question4(message: Message, state: FSMContext):
    data = await state.get_data()
    data[message.text] += 1
    await state.update_data(data)
    await message.answer("""5. –ö–∞–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç –∫–æ—Ç–∞ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?
    –ê) –ú–∏—Ä–æ–ª—é–±–∏–≤—ã–π –∏ –ø–æ—Å–ª—É—à–Ω—ã–π.
    –ë) –ê–∫—Ç–∏–≤–Ω—ã–π –∏ –ª—é–±–æ–ø—ã—Ç–Ω—ã–π.
    –í) –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∏ –Ω–µ–ø—Ä–∏—Å—Ç—É–ø–Ω—ã–π.""", reply_markup=keyboards.test_reply_keyboard())
    await state.set_state(TestStates.question5)

@router.message(TestStates.question5)
async def question5(message: Message, state: FSMContext):
    data = await state.get_data()
    data[message.text] += 1
    await state.update_data(data)
    await message.answer("""6. –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–µ—Ç–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ?
    –ê) –î–∞, –Ω—É–∂–µ–Ω –∫–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ª–∞–¥–∏—Ç —Å –¥—Ä—É–≥–∏–º–∏.
    –ë) –ù–µ—Ç, –Ω–æ —Ö–æ—á—É, —á—Ç–æ–±—ã –∫–æ—Ç –±—ã–ª –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º.
    –í) –ù–µ—Ç, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –∫–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.""", reply_markup=keyboards.test_reply_keyboard())
    await state.set_state(TestStates.question6)

@router.message(TestStates.question6)
async def question6(message: Message, state: FSMContext):
    data = await state.get_data()
    data[message.text] += 1
    await state.update_data(data)
    await message.answer("""7. –ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –∫–æ—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ª–µ—á–µ–Ω–∏–∏?
    –ê) –î–∞, –≥–æ—Ç–æ–≤(–∞) –ø–æ–º–æ—á—å.
    –ë) –ù–µ—Ç, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –∑–¥–æ—Ä–æ–≤–æ–≥–æ –∫–æ—Ç–∞.
    –í) –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–∏—Ö —É—Å–∏–ª–∏–π.""", reply_markup=keyboards.test_reply_keyboard())
    await state.set_state(TestStates.answer)

@router.message(TestStates.answer)
async def answer(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(f"–≤–∞–º –ø–æ–¥–æ–π–¥–µ—Ç –∫–æ—Ç–∏–∫ {best_match(results[max(data, key=data.get)])}", reply_markup=keyboards.ReplyKeyboardRemove())
    await message.answer(strings.GREETING, reply_markup=keyboards.start_keyboard())
    await state.clear()