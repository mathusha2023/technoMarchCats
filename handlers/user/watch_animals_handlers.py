from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import Command
from data import db_session
import keyboards
import strings
from sqlalchemy import and_
from data.animal_requests import AnimalRequest
from data.animals import Animal
from data.animals_filters import AnimalFilter
from data.db_session import create_session
from data.users import User
from filters import StatesGroupFilter
from states import WatchAnimalsStates
from utils.generate_animal_filter_message import generate_animal_filter_message
from utils.generate_next_animal_card import generate_next_animal_card
from utils.send_message_to_all_administrators import send_message_to_all_administrators

router = Router()


@router.message(F.text == "üìÇ –í –º–µ–Ω—é",
                StatesGroupFilter(WatchAnimalsStates))  # —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ù–∞–¥–µ—é—Å—å, –≤—ã –Ω–∞—à–ª–∏ —Å–µ–±–µ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞!", reply_markup=keyboards.ReplyKeyboardRemove())
    await message.answer(strings.GREETING, reply_markup=keyboards.start_keyboard())


@router.message(Command("cats"))
async def cats(message: Message, state: FSMContext):
    await state.set_state(WatchAnimalsStates.watching)
    await message.answer("–í–æ—Ç –Ω–∞—à–∏ –ø—É—à–∏—Å—Ç—ã–µ –¥—Ä—É–∑—å—è. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤–∞–º –∫—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–≥–ª—è–Ω–µ—Ç—Å—è?",
                         reply_markup=keyboards.watch_animals_keyboard())
    await generate_next_animal_card(message.from_user.id, message)


@router.message(F.text == "‚ÜòÔ∏è –°–ª–µ–¥—É—é—â–∏–π –∫–æ—Ç–∏–∫", WatchAnimalsStates.watching)
async def next_cat(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("took", False):  # –µ—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –≤–∑—è–ª–∏, —Ç–æ –Ω–∞–¥–æ –ø–æ–º–µ–Ω—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—É—à–∏—Å—Ç–∏–∫–æ–≤!", reply_markup=keyboards.watch_animals_keyboard())
        await state.set_data({"took": False})
    await generate_next_animal_card(message.from_user.id, message)


@router.message(F.text == "üîÑ –ö–æ—à–∞—á–∏–π —Ñ–∏–ª—å—Ç—Ä", WatchAnimalsStates.watching)
async def cats_filter(message: Message):
    session = create_session()
    animal_filter: AnimalFilter = session.query(User).where(User.id == message.from_user.id).first().filter
    await generate_animal_filter_message(message, animal_filter)


@router.message(F.text == "üì• –•–æ—á—É –≤–∑—è—Ç—å!", WatchAnimalsStates.watching)
async def take_cat(message: Message, state: FSMContext, bot: Bot):
    session = db_session.create_session()

    user = session.query(User).where(User.id == message.from_user.id).first()
    animal = session.query(Animal).where(
        Animal.id == user.lastWatchedAnimal).first()  # –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ
    if animal is None:  # –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ –∏–º–µ–µ—Ç ID 0, —Ç–æ –µ—Å—Ç—å –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
        return await message.answer("–°–µ–π—á–∞—Å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ!")

    last_request = session.query(AnimalRequest).where(and_(AnimalRequest.userId == user.id, AnimalRequest.animalId == animal.id)).first()  # –∏—â–µ–º –∑–∞—è–≤–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if last_request:  # –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –∑–∞–Ω–æ–≤–æ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ–º
        return await message.answer("–ó–∞—è–≤–∫–∞ –Ω–∞ —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞ —É–∂–∞ –±—ã–ª–∞ –ø–æ–¥–∞–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!")

    animal_request = AnimalRequest()
    animal_request.user = user
    animal_request.animal = animal
    session.add(animal_request)
    session.commit()

    await send_message_to_all_administrators(bot, "–ü–æ–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")  # –æ–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏

    await state.update_data({"took": True})  # –µ—Å–ª–∏ –∫–æ—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –≤–∑—è–ª–∏ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥

    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ò–¥—ë–º –¥–∞–ª—å—à–µ?",
                         reply_markup=keyboards.watch_animals_after_taking_keyboard())
